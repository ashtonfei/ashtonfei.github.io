{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTextarea/VTextarea.tsx"],
  "sourcesContent": ["// Styles\nimport './VTextarea.sass'\nimport '../VTextField/VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { callEvent, clamp, convertToUnit, filterInputAttrs, genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport const VTextarea = genericComponent<Omit<VInputSlots & VFieldSlots, 'default'>>()({\n  name: 'VTextarea',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    suffix: String,\n    modelModifiers: Object as PropType<Record<string, boolean>>,\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as string | number\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const controlHeight = ref('')\n    const textareaRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      isFocused.value ||\n      props.persistentPlaceholder\n    ))\n\n    function onFocus () {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      const el = e.target as HTMLTextAreaElement\n      model.value = el.value\n      if (props.modelModifiers?.trim) {\n        const caretPosition = [el.selectionStart, el.selectionEnd]\n        nextTick(() => {\n          el.selectionStart = caretPosition[0]\n          el.selectionEnd = caretPosition[1]\n        })\n      }\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-input-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = Math.max(\n          parseFloat(props.rows) * lineHeight + padding,\n          parseFloat(fieldStyle.getPropertyValue('--v-input-control-height'))\n        )\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n\n        controlHeight.value = convertToUnit(clamp(height ?? 0, minHeight, maxHeight))\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n    watch(() => props.density, calculateInputHeight)\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = VInput.filterProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-textarea v-text-field',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                style={{\n                  '--v-textarea-control-height': controlHeight.value,\n                }}\n                onClick={ onControlClick }\n                onMousedown={ onControlMousedown }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      { props.prefix && (\n                        <span class=\"v-text-field__prefix\">\n                          { props.prefix }\n                        </span>\n                      )}\n\n                      <textarea\n                        ref={ textareaRef }\n                        class={ fieldClass }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        placeholder={ props.placeholder }\n                        rows={ props.rows }\n                        name={ props.name }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { props.autoGrow && (\n                        <textarea\n                          class={[\n                            fieldClass,\n                            'v-textarea__sizer',\n                          ]}\n                          v-model={ model.value }\n                          ref={ sizerRef }\n                          readonly\n                          aria-hidden=\"true\"\n                        />\n                      )}\n\n                      { props.suffix && (\n                        <span class=\"v-text-field__suffix\">\n                          { props.suffix }\n                        </span>\n                      )}\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef)\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n"],
  "mappings": "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",
  "names": ["VTextarea", "genericComponent", "name", "directives", "Intersect", "inheritAttrs", "props", "autoGrow", "Boolean", "autofocus", "counter", "Number", "String", "counterValue", "Function", "prefix", "placeholder", "persistentPlaceholder", "persistentCounter", "noResize", "rows", "type", "default", "validator", "v", "isNaN", "parseFloat", "maxRows", "suffix", "modelModifiers", "Object", "makeVInputProps", "makeVFieldProps", "emits", "e", "focused", "val", "setup", "_ref", "attrs", "emit", "slots", "model", "useProxiedModel", "isFocused", "focus", "blur", "useFocus", "computed", "value", "toString", "length", "max", "maxlength", "undefined", "onIntersect", "isIntersecting", "entries", "target", "vInputRef", "ref", "vFieldRef", "controlHeight", "textareaRef", "isActive", "onFocus", "document", "activeElement", "onControlClick", "onControlMousedown", "onClear", "stopPropagation", "nextTick", "callEvent", "onInput", "el", "trim", "caretPosition", "selectionStart", "selectionEnd", "sizerRef", "calculateInputHeight", "style", "getComputedStyle", "fieldStyle", "$el", "padding", "getPropertyValue", "height", "scrollHeight", "lineHeight", "minHeight", "Math", "maxHeight", "Infinity", "convertToUnit", "clamp", "onMounted", "watch", "density", "observer", "ResizeObserver", "observe", "disconnect", "onBeforeUnmount", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "modelValue", "_", "inputProps", "VInput", "filterProps", "fieldProps", "filterFieldProps", "_createVNode", "_mergeProps", "$event", "includes", "variant", "_ref2", "isDisabled", "isDirty", "isReadonly", "isValid", "VField", "dirty", "_ref3", "class", "fieldClass", "slotProps", "_Fragment", "_withDirectives", "_resolveDirective", "handler", "once", "_vModelText", "VCounter", "forwardRefs"]
}
