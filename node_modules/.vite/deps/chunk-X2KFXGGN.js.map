{
  "version": 3,
  "sources": ["../../vuetify/src/components/VChip/VChip.tsx"],
  "sourcesContent": ["/* eslint-disable complexity */\n// Styles\nimport './VChip.sass'\n\n// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VChipGroupSymbol } from '@/components/VChipGroup/VChipGroup'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VExpandXTransition } from '@/components/transitions'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { IconValue } from '@/composables/icons'\nimport { useLocale } from '@/composables/locale'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { EventProp, genericComponent } from '@/util'\nimport { computed } from 'vue'\n\n// Types\nimport type { MakeSlots } from '@/util'\n\nexport type VChipSlots = MakeSlots<{\n  default: []\n  label: []\n  prepend: []\n  append: []\n}>\n\nexport const VChip = genericComponent<VChipSlots>()({\n  name: 'VChip',\n\n  directives: { Ripple },\n\n  props: {\n    activeClass: String,\n    appendAvatar: String,\n    appendIcon: IconValue,\n    closable: Boolean,\n    closeIcon: {\n      type: IconValue,\n      default: '$delete',\n    },\n    closeLabel: {\n      type: String,\n      default: '$vuetify.close',\n    },\n    draggable: Boolean,\n    filter: Boolean,\n    filterIcon: {\n      type: String,\n      default: '$complete',\n    },\n    label: Boolean,\n    link: {\n      type: Boolean,\n      default: undefined,\n    },\n    pill: Boolean,\n    prependAvatar: String,\n    prependIcon: IconValue,\n    ripple: {\n      type: Boolean,\n      default: true,\n    },\n    text: String,\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n\n    onClick: EventProp<[MouseEvent]>(),\n    onClickOnce: EventProp<[MouseEvent]>(),\n\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'span' }),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'tonal' } as const),\n  },\n\n  emits: {\n    'click:close': (e: MouseEvent) => true,\n    'update:modelValue': (value: boolean) => true,\n    'group:selected': (val: { value: boolean }) => true,\n    click: (e: MouseEvent | KeyboardEvent) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { t } = useLocale()\n    const { borderClasses } = useBorder(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { densityClasses } = useDensity(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { sizeClasses } = useSize(props)\n    const { themeClasses } = provideTheme(props)\n\n    const isActive = useProxiedModel(props, 'modelValue')\n    const group = useGroupItem(props, VChipGroupSymbol, false)\n    const link = useLink(props, attrs)\n    const isLink = computed(() => props.link !== false && link.isLink.value)\n    const isClickable = computed(() =>\n      !props.disabled &&\n      props.link !== false &&\n      (!!group || props.link || link.isClickable.value)\n    )\n    const closeProps = computed(() => ({\n      'aria-label': t(props.closeLabel),\n      onClick (e: MouseEvent) {\n        isActive.value = false\n\n        emit('click:close', e)\n      },\n    }))\n\n    function onClick (e: MouseEvent) {\n      emit('click', e)\n\n      if (!isClickable.value) return\n\n      link.navigate?.(e)\n      group?.toggle()\n    }\n\n    function onKeyDown (e: KeyboardEvent) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault()\n        onClick(e as any as MouseEvent)\n      }\n    }\n\n    return () => {\n      const Tag = (link.isLink.value) ? 'a' : props.tag\n      const hasAppendMedia = !!(props.appendIcon || props.appendAvatar)\n      const hasAppend = !!(hasAppendMedia || slots.append)\n      const hasClose = !!(slots.close || props.closable)\n      const hasFilter = !!(slots.filter || props.filter) && group\n      const hasPrependMedia = !!(props.prependIcon || props.prependAvatar)\n      const hasPrepend = !!(hasPrependMedia || slots.prepend)\n      const hasColor = !group || group.isSelected.value\n\n      return isActive.value && (\n        <Tag\n          class={[\n            'v-chip',\n            {\n              'v-chip--disabled': props.disabled,\n              'v-chip--label': props.label,\n              'v-chip--link': isClickable.value,\n              'v-chip--filter': hasFilter,\n              'v-chip--pill': props.pill,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            hasColor ? colorClasses.value : undefined,\n            densityClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n            sizeClasses.value,\n            variantClasses.value,\n            group?.selectedClass.value,\n          ]}\n          style={[\n            hasColor ? colorStyles.value : undefined,\n          ]}\n          disabled={ props.disabled || undefined }\n          draggable={ props.draggable }\n          href={ link.href.value }\n          tabindex={ isClickable.value ? 0 : undefined }\n          onClick={ onClick }\n          onKeydown={ isClickable.value && !isLink.value && onKeyDown }\n          v-ripple={[isClickable.value && props.ripple, null]}\n        >\n          { genOverlays(isClickable.value, 'v-chip') }\n\n          { hasFilter && (\n            <VExpandXTransition key=\"filter\">\n              <div\n                class=\"v-chip__filter\"\n                v-show={ group.isSelected.value }\n              >\n                { !slots.filter ? (\n                  <VIcon\n                    key=\"filter-icon\"\n                    icon={ props.filterIcon }\n                  />\n                ) : (\n                  <VDefaultsProvider\n                    key=\"filter-defaults\"\n                    disabled={ !props.filterIcon }\n                    defaults={{\n                      VIcon: { icon: props.filterIcon },\n                    }}\n                    v-slot:default={ slots.filter }\n                  />\n                )}\n              </div>\n            </VExpandXTransition>\n          )}\n\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-chip__prepend\">\n              { !slots.prepend ? (\n                <>\n                  { props.prependIcon && (\n                    <VIcon\n                      key=\"prepend-icon\"\n                      icon={ props.prependIcon }\n                      start\n                    />\n                  )}\n\n                  { props.prependAvatar && (\n                    <VAvatar\n                      key=\"prepend-avatar\"\n                      image={ props.prependAvatar }\n                      start\n                    />\n                  )}\n                </>\n              ) : (\n                <VDefaultsProvider\n                  key=\"prepend-defaults\"\n                  disabled={ !hasPrependMedia }\n                  defaults={{\n                    VAvatar: {\n                      image: props.prependAvatar,\n                      start: true,\n                    },\n                    VIcon: {\n                      icon: props.prependIcon,\n                      start: true,\n                    },\n                  }}\n                  v-slots:default={ slots.prepend }\n                />\n              )}\n            </div>\n          )}\n\n          { slots.default?.({\n            isSelected: group?.isSelected.value,\n            selectedClass: group?.selectedClass.value,\n            select: group?.select,\n            toggle: group?.toggle,\n            value: group?.value.value,\n            disabled: props.disabled,\n          }) ?? props.text }\n\n          { hasAppend && (\n            <div key=\"append\" class=\"v-chip__append\">\n              { !slots.append ? (\n                <>\n                  { props.appendIcon && (\n                    <VIcon\n                      key=\"append-icon\"\n                      end\n                      icon={ props.appendIcon }\n                    />\n                  )}\n\n                  { props.appendAvatar && (\n                    <VAvatar\n                      key=\"append-avatar\"\n                      end\n                      image={ props.appendAvatar }\n                    />\n                  )}\n                </>\n              ) : (\n                <VDefaultsProvider\n                  key=\"append-defaults\"\n                  disabled={ !hasAppendMedia }\n                  defaults={{\n                    VAvatar: {\n                      end: true,\n                      image: props.appendAvatar,\n                    },\n                    VIcon: {\n                      end: true,\n                      icon: props.appendIcon,\n                    },\n                  }}\n                  v-slots:default={ slots.append }\n                />\n              )}\n            </div>\n          )}\n\n          { hasClose && (\n            <div\n              key=\"close\"\n              class=\"v-chip__close\"\n              { ...closeProps.value }\n            >\n              { !slots.close ? (\n                <VIcon\n                  key=\"close-icon\"\n                  icon={ props.closeIcon }\n                  size=\"x-small\"\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"close-defaults\"\n                  defaults={{\n                    VIcon: {\n                      icon: props.closeIcon,\n                      size: 'x-small',\n                    },\n                  }}\n                  v-slots:default={ slots.close }\n                />\n              )}\n            </div>\n          )}\n        </Tag>\n      )\n    }\n  },\n})\n\nexport type VChip = InstanceType<typeof VChip>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAA;AAyCO,IAAMA,QAAQC,iBAAgB,EAAe;EAClDC,MAAM;EAENC,YAAY;IAAEC;EAAO;EAErBC,OAAO;IACLC,aAAaC;IACbC,cAAcD;IACdE,YAAYC;IACZC,UAAUC;IACVC,WAAW;MACTC,MAAMJ;MACNK,SAAS;IACX;IACAC,YAAY;MACVF,MAAMP;MACNQ,SAAS;IACX;IACAE,WAAWL;IACXM,QAAQN;IACRO,YAAY;MACVL,MAAMP;MACNQ,SAAS;IACX;IACAK,OAAOR;IACPS,MAAM;MACJP,MAAMF;MACNG,SAASO;IACX;IACAC,MAAMX;IACNY,eAAejB;IACfkB,aAAaf;IACbgB,QAAQ;MACNZ,MAAMF;MACNG,SAAS;IACX;IACAY,MAAMpB;IACNqB,YAAY;MACVd,MAAMF;MACNG,SAAS;IACX;IAEAc,SAASC,UAAS;IAClBC,aAAaD,UAAS;IAEtB,GAAGE,gBAAe;IAClB,GAAGC,iBAAgB;IACnB,GAAGC,mBAAkB;IACrB,GAAGC,mBAAkB;IACrB,GAAGC,iBAAgB;IACnB,GAAGC,gBAAe;IAClB,GAAGC,cAAa;IAChB,GAAGC,aAAa;MAAEC,KAAK;IAAO,CAAC;IAC/B,GAAGC,eAAc;IACjB,GAAGC,iBAAiB;MAAEC,SAAS;IAAQ,CAAC;EAC1C;EAEAC,OAAO;IACL,eAAgBC,OAAkB;IAClC,qBAAsBC,WAAmB;IACzC,kBAAmBC,SAA4B;IAC/CC,OAAQH,OAAkC;EAC5C;EAEAI,MAAO5C,OAAK6C,MAA0B;AAAA,QAAxB;MAAEC;MAAOC;MAAMC;IAAM,IAACH;AAClC,UAAM;MAAEI;IAAE,IAAIC,UAAS;AACvB,UAAM;MAAEC;IAAc,IAAIC,UAAUpD,KAAK;AACzC,UAAM;MAAEqD;MAAcC;MAAaC;IAAe,IAAIC,WAAWxD,KAAK;AACtE,UAAM;MAAEyD;IAAe,IAAIC,WAAW1D,KAAK;AAC3C,UAAM;MAAE2D;IAAiB,IAAIC,aAAa5D,KAAK;AAC/C,UAAM;MAAE6D;IAAe,IAAIC,WAAW9D,KAAK;AAC3C,UAAM;MAAE+D;IAAY,IAAIC,QAAQhE,KAAK;AACrC,UAAM;MAAEiE;IAAa,IAAIC,aAAalE,KAAK;AAE3C,UAAMmE,WAAWC,gBAAgBpE,OAAO,YAAY;AACpD,UAAMqE,QAAQC,aAAatE,OAAOuE,kBAAkB,KAAK;AACzD,UAAMvD,OAAOwD,QAAQxE,OAAO8C,KAAK;AACjC,UAAM2B,SAASC,SAAS,MAAM1E,MAAMgB,SAAS,SAASA,KAAKyD,OAAOhC,KAAK;AACvE,UAAMkC,cAAcD,SAAS,MAC3B,CAAC1E,MAAM4E,YACP5E,MAAMgB,SAAS,UACd,CAAC,CAACqD,SAASrE,MAAMgB,QAAQA,KAAK2D,YAAYlC,MAAM;AAEnD,UAAMoC,aAAaH,SAAS,OAAO;MACjC,cAAczB,EAAEjD,MAAMW,UAAU;MAChCa,QAASgB,GAAe;AACtB2B,iBAAS1B,QAAQ;AAEjBM,aAAK,eAAeP,CAAC;MACvB;IACF,EAAE;AAEF,aAAShB,QAASgB,GAAe;;AAC/BO,WAAK,SAASP,CAAC;AAEf,UAAI,CAACmC,YAAYlC;AAAO;AAExBzB,iBAAK8D,aAAL9D,8BAAgBwB;AAChB6B,qCAAOU;IACT;AAEA,aAASC,UAAWxC,GAAkB;AACpC,UAAIA,EAAEyC,QAAQ,WAAWzC,EAAEyC,QAAQ,KAAK;AACtCzC,UAAE0C,eAAc;AAChB1D,gBAAQgB,CAAC;MACX;IACF;AAEA,WAAO,MAAM;AACX,YAAM2C,MAAOnE,KAAKyD,OAAOhC,QAAS,MAAMzC,MAAMmC;AAC9C,YAAMiD,iBAAiB,CAAC,EAAEpF,MAAMI,cAAcJ,MAAMG;AACpD,YAAMkF,YAAY,CAAC,EAAED,kBAAkBpC,MAAMsC;AAC7C,YAAMC,WAAW,CAAC,EAAEvC,MAAMwC,SAASxF,MAAMM;AACzC,YAAMmF,YAAY,CAAC,EAAEzC,MAAMnC,UAAUb,MAAMa,WAAWwD;AACtD,YAAMqB,kBAAkB,CAAC,EAAE1F,MAAMoB,eAAepB,MAAMmB;AACtD,YAAMwE,aAAa,CAAC,EAAED,mBAAmB1C,MAAM4C;AAC/C,YAAMC,WAAW,CAACxB,SAASA,MAAMyB,WAAWrD;AAE5C,aAAO0B,SAAS1B,SAAKsD,eAAAC,YAAAb,KAAA;QAAA,SAEV,CACL,UACA;UACE,oBAAoBnF,MAAM4E;UAC1B,iBAAiB5E,MAAMe;UACvB,gBAAgB4D,YAAYlC;UAC5B,kBAAkBgD;UAClB,gBAAgBzF,MAAMkB;QACxB,GACA+C,aAAaxB,OACbU,cAAcV,OACdoD,WAAWxC,aAAaZ,QAAQxB,QAChCwC,eAAehB,OACfkB,iBAAiBlB,OACjBoB,eAAepB,OACfsB,YAAYtB,OACZc,eAAed,OACf4B,+BAAO4B,cAAcxD,KAAK;QAC3B,SACM,CACLoD,WAAWvC,YAAYb,QAAQxB,MAAS;QACzC,YACUjB,MAAM4E,YAAY3D;QAAS,aAC1BjB,MAAMY;QAAS,QACpBI,KAAKkF,KAAKzD;QAAK,YACXkC,YAAYlC,QAAQ,IAAIxB;QAAS,WAClCO;QAAO,aACLmD,YAAYlC,SAAS,CAACgC,OAAOhC,SAASuC;MAAS,GAAA;QAAAtE,SAAAA,MAAA;;AAAA,kBAGzDyF,YAAYxB,YAAYlC,OAAO,QAAQ,GAEvCgD,aAASO,YAAAI,oBAAA;YAAA,OACe;UAAQ,GAAA;YAAA1F,SAAAA,MAAA,CAAAqF,eAAAC,YAAA,OAAA;cAAA,SAEtB;YAAgB,GAAA,CAGpB,CAAChD,MAAMnC,SAAMmF,YAAAK,OAAA;cAAA,OAEP;cAAa,QACVrG,MAAMc;YAAU,GAAA,IAAA,IAAAiF,eAAAC,YAAAM,mBAAA;cAAA,OAInB;cAAiB,YACV,CAACtG,MAAMc;cAAU,YAClB;gBACRuF,OAAO;kBAAEE,MAAMvG,MAAMc;gBAAW;cAClC;YAAC,GAAA,IAAA,GAAA,CAAA,CAAA0F,iBAAA,MAAA,GACgBxD,MAAMnC,QAAM,SAAA,CAAA,CAAA,CAEhC,CAAA,GAAA,CAAA,CAAA4F,OAhBQpC,MAAMyB,WAAWrD,KAAK,CAAA,CAAA,CAAA;UAAA,CAAA,GAqBnCkD,cAAUK,YAAA,OAAA;YAAA,OACD;YAAS,SAAO;UAAiB,GAAA,CACtC,CAAChD,MAAM4C,UAAOI,YAAAU,UAAA,MAAA,CAEV1G,MAAMoB,eAAW4E,YAAAK,OAAA;YAAA,OAEX;YAAc,QACXrG,MAAMoB;YAAW,SAAA;UAAA,GAAA,IAAA,GAK1BpB,MAAMmB,iBAAa6E,YAAAW,SAAA;YAAA,OAEb;YAAgB,SACZ3G,MAAMmB;YAAa,SAAA;UAAA,GAAA,IAAA,CAG9B,CAAA,IAAA6E,YAAAM,mBAAA;YAAA,OAIG;YAAkB,YACX,CAACZ;YAAe,YACjB;cACRiB,SAAS;gBACPC,OAAO5G,MAAMmB;gBACb0F,OAAO;cACT;cACAR,OAAO;gBACLE,MAAMvG,MAAMoB;gBACZyF,OAAO;cACT;YACF;UAAC,GACiB7D,MAAM4C,OAAO,CAElC,CAAA,IAIH5C,iBAAMtC,YAANsC,+BAAgB;YAChB8C,YAAYzB,+BAAOyB,WAAWrD;YAC9BwD,eAAe5B,+BAAO4B,cAAcxD;YACpCqE,QAAQzC,+BAAOyC;YACf/B,QAAQV,+BAAOU;YACftC,OAAO4B,+BAAO5B,MAAMA;YACpBmC,UAAU5E,MAAM4E;UAClB,OAPE5B,YAOIhD,MAAMsB,MAEV+D,aAASW,YAAA,OAAA;YAAA,OACA;YAAQ,SAAO;UAAgB,GAAA,CACpC,CAAChD,MAAMsC,SAAMU,YAAAU,UAAA,MAAA,CAET1G,MAAMI,cAAU4F,YAAAK,OAAA;YAAA,OAEV;YAAa,OAAA;YAAA,QAEVrG,MAAMI;UAAU,GAAA,IAAA,GAIzBJ,MAAMG,gBAAY6F,YAAAW,SAAA;YAAA,OAEZ;YAAe,OAAA;YAAA,SAEX3G,MAAMG;UAAY,GAAA,IAAA,CAE7B,CAAA,IAAA6F,YAAAM,mBAAA;YAAA,OAIG;YAAiB,YACV,CAAClB;YAAc,YAChB;cACRuB,SAAS;gBACPI,KAAK;gBACLH,OAAO5G,MAAMG;cACf;cACAkG,OAAO;gBACLU,KAAK;gBACLR,MAAMvG,MAAMI;cACd;YACF;UAAC,GACiB4C,MAAMsC,MAAM,CAEjC,CAAA,GAIHC,YAAQS,YAAA,OAAAgB,WAAA;YAAA,OAEF;YAAO,SACL;UAAe,GAChBnC,WAAWpC,KAAK,GAAA,CAEnB,CAACO,MAAMwC,QAAKQ,YAAAK,OAAA;YAAA,OAEN;YAAY,QACTrG,MAAMQ;YAAS,QACjB;UAAS,GAAA,IAAA,IAAAwF,YAAAM,mBAAA;YAAA,OAIV;YAAgB,YACV;cACRD,OAAO;gBACLE,MAAMvG,MAAMQ;gBACZyG,MAAM;cACR;YACF;UAAC,GACiBjE,MAAMwC,KAAK,CAEhC,CAAA,CAEJ;;MAAA,CAAA,GAAA,CAAA,CAAAgB,iBAAA,QAAA,GA/IU7B,YAAYlC,SAASzC,MAAMqB,QAAQ,IAAI,CAAA,CAAA;IAkJxD;EACF;AACF,CAAC;",
  "names": ["VChip", "genericComponent", "name", "directives", "Ripple", "props", "activeClass", "String", "appendAvatar", "appendIcon", "IconValue", "closable", "Boolean", "closeIcon", "type", "default", "closeLabel", "draggable", "filter", "filterIcon", "label", "link", "undefined", "pill", "prependAvatar", "prependIcon", "ripple", "text", "modelValue", "onClick", "EventProp", "onClickOnce", "makeBorderProps", "makeDensityProps", "makeElevationProps", "makeGroupItemProps", "makeRoundedProps", "makeRouterProps", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "makeVariantProps", "variant", "emits", "e", "value", "val", "click", "setup", "_ref", "attrs", "emit", "slots", "t", "useLocale", "borderClasses", "useBorder", "colorClasses", "colorStyles", "variantClasses", "useVariant", "densityClasses", "useDensity", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "sizeClasses", "useSize", "themeClasses", "provideTheme", "isActive", "useProxiedModel", "group", "useGroupItem", "VChipGroupSymbol", "useLink", "isLink", "computed", "isClickable", "disabled", "closeProps", "navigate", "toggle", "onKeyDown", "key", "preventDefault", "Tag", "hasAppendMedia", "hasAppend", "append", "hasClose", "close", "hasFilter", "hasPrependMedia", "hasPrepend", "prepend", "hasColor", "isSelected", "_withDirectives", "_createVNode", "selectedClass", "href", "genOverlays", "VExpandXTransition", "VIcon", "VDefaultsProvider", "icon", "_resolveDirective", "_vShow", "_Fragment", "VAvatar", "image", "start", "select", "end", "_mergeProps", "size"]
}
