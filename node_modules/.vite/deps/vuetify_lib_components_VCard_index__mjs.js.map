{
  "version": 3,
  "sources": ["../../vuetify/src/components/VCard/VCard.tsx", "../../vuetify/src/components/VCard/VCardActions.tsx", "../../vuetify/src/components/VCard/VCardSubtitle.ts", "../../vuetify/src/components/VCard/VCardTitle.ts", "../../vuetify/src/components/VCard/VCardItem.tsx", "../../vuetify/src/components/VCard/VCardText.ts"],
  "sourcesContent": ["/* eslint-disable complexity */\n\n// Styles\nimport './VCard.sass'\n\n// Components\nimport { VCardActions } from './VCardActions'\nimport { VCardItem } from './VCardItem'\nimport { VCardText } from './VCardText'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VImg } from '@/components/VImg'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { IconValue } from '@/composables/icons'\nimport { LoaderSlot, makeLoaderProps, useLoader } from '@/composables/loader'\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { MakeSlots } from '@/util'\nimport type { LoaderSlotProps } from '@/composables/loader'\n\nexport type VCardSlots = MakeSlots<{\n  default: []\n  actions: []\n  title: []\n  subtitle: []\n  text: []\n  loader: [LoaderSlotProps]\n  image: []\n  prepend: []\n  append: []\n}>\n\nexport const VCard = genericComponent<VCardSlots>()({\n  name: 'VCard',\n\n  directives: { Ripple },\n\n  props: {\n    appendAvatar: String,\n    appendIcon: IconValue,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    image: String,\n    link: {\n      type: Boolean,\n      default: undefined,\n    },\n    prependAvatar: String,\n    prependIcon: IconValue,\n    ripple: {\n      type: Boolean,\n      default: true,\n    },\n    subtitle: String,\n    text: String,\n    title: String,\n\n    ...makeThemeProps(),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeLoaderProps(),\n    ...makeLocationProps(),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeTagProps(),\n    ...makeVariantProps({ variant: 'elevated' } as const),\n  },\n\n  setup (props, { attrs, slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { borderClasses } = useBorder(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { densityClasses } = useDensity(props)\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { loaderClasses } = useLoader(props)\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { roundedClasses } = useRounded(props)\n    const link = useLink(props, attrs)\n\n    const isLink = computed(() => props.link !== false && link.isLink.value)\n    const isClickable = computed(() =>\n      !props.disabled &&\n      props.link !== false &&\n      (props.link || link.isClickable.value)\n    )\n\n    useRender(() => {\n      const Tag = isLink.value ? 'a' : props.tag\n      const hasTitle = !!(slots.title || props.title)\n      const hasSubtitle = !!(slots.subtitle || props.subtitle)\n      const hasHeader = hasTitle || hasSubtitle\n      const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon)\n      const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon)\n      const hasImage = !!(slots.image || props.image)\n      const hasCardItem = hasHeader || hasPrepend || hasAppend\n      const hasText = !!(slots.text || props.text)\n\n      return (\n        <Tag\n          class={[\n            'v-card',\n            {\n              'v-card--disabled': props.disabled,\n              'v-card--flat': props.flat,\n              'v-card--hover': props.hover && !(props.disabled || props.flat),\n              'v-card--link': isClickable.value,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            colorClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            loaderClasses.value,\n            positionClasses.value,\n            roundedClasses.value,\n            variantClasses.value,\n          ]}\n          style={[\n            colorStyles.value,\n            dimensionStyles.value,\n            locationStyles.value,\n          ]}\n          href={ link.href.value }\n          onClick={ isClickable.value && link.navigate }\n          v-ripple={ isClickable.value && props.ripple }\n          tabindex={ props.disabled ? -1 : undefined }\n        >\n          { hasImage && (\n            <div key=\"image\" class=\"v-card__image\">\n              { !slots.image ? (\n                <VImg\n                  key=\"image-img\"\n                  cover\n                  src={ props.image }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"image-defaults\"\n                  disabled={ !props.image }\n                  defaults={{\n                    VImg: {\n                      cover: true,\n                      src: props.image,\n                    },\n                  }}\n                  v-slots:default={ slots.image }\n                />\n              )}\n            </div>\n          )}\n\n          <LoaderSlot\n            name=\"v-card\"\n            active={ !!props.loading }\n            color={ typeof props.loading === 'boolean' ? undefined : props.loading }\n            v-slots={{ default: slots.loader }}\n          />\n\n          { hasCardItem && (\n            <VCardItem\n              key=\"item\"\n              prependAvatar={ props.prependAvatar }\n              prependIcon={ props.prependIcon }\n              title={ props.title }\n              subtitle={ props.subtitle }\n              appendAvatar={ props.appendAvatar }\n              appendIcon={ props.appendIcon }\n            >\n              {{\n                default: slots.item,\n                prepend: slots.prepend,\n                title: slots.title,\n                subtitle: slots.subtitle,\n                append: slots.append,\n              }}\n            </VCardItem>\n          )}\n\n          { hasText && (\n            <VCardText key=\"text\">\n              { slots.text?.() ?? props.text }\n            </VCardText>\n          )}\n\n          { slots.default?.() }\n\n          { slots.actions && (\n            <VCardActions v-slots={{ default: slots.actions }} />\n          )}\n\n          { genOverlays(isClickable.value, 'v-card') }\n        </Tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCard = InstanceType<typeof VCard>\n", "// Composables\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\n\n// Types\nimport type { SlotsToProps } from '@/util'\n\nexport const VCardActions = defineComponent<SlotsToProps<{ default: [] }>>({\n  name: 'VCardActions',\n\n  setup (_, { slots }) {\n    provideDefaults({\n      VBtn: {\n        variant: 'text',\n      },\n    })\n\n    useRender(() => (\n      <div class=\"v-card-actions\">\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VCardActions = InstanceType<typeof VCardActions>\n", "import { createSimpleFunctional } from '@/util'\n\nexport const VCardSubtitle = createSimpleFunctional('v-card-subtitle')\n\nexport type VCardSubtitle = InstanceType<typeof VCardSubtitle>\n", "import { createSimpleFunctional } from '@/util'\n\nexport const VCardTitle = createSimpleFunctional('v-card-title')\n\nexport type VCardTitle = InstanceType<typeof VCardTitle>\n", "// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VCardSubtitle } from './VCardSubtitle'\nimport { VCardTitle } from './VCardTitle'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps } from '@/composables/density'\n\n// Utility\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { MakeSlots } from '@/util'\n\nexport type VCardItemSlots = MakeSlots<{\n  default: []\n  prepend: []\n  append: []\n  title: []\n  subtitle: []\n}>\n\nexport const VCardItem = genericComponent<VCardItemSlots>()({\n  name: 'VCardItem',\n\n  props: {\n    appendAvatar: String,\n    appendIcon: IconValue,\n    prependAvatar: String,\n    prependIcon: IconValue,\n    subtitle: String,\n    title: String,\n\n    ...makeDensityProps(),\n  },\n\n  setup (props, { slots }) {\n    useRender(() => {\n      const hasPrependMedia = !!(props.prependAvatar || props.prependIcon)\n      const hasPrepend = !!(hasPrependMedia || slots.prepend)\n      const hasAppendMedia = !!(props.appendAvatar || props.appendIcon)\n      const hasAppend = !!(hasAppendMedia || slots.append)\n      const hasTitle = !!(props.title || slots.title)\n      const hasSubtitle = !!(props.subtitle || slots.subtitle)\n\n      return (\n        <div class=\"v-card-item\">\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-card-item__prepend\">\n              { !slots.prepend ? (\n                hasPrependMedia && (\n                  <VAvatar\n                    key=\"prepend-avatar\"\n                    density={ props.density }\n                    icon={ props.prependIcon }\n                    image={ props.prependAvatar }\n                  />\n                )\n              ) : (\n                <VDefaultsProvider\n                  key=\"prepend-defaults\"\n                  disabled={ !hasPrependMedia }\n                  defaults={{\n                    VAvatar: {\n                      density: props.density,\n                      icon: props.prependIcon,\n                      image: props.prependAvatar,\n                    },\n                  }}\n                  v-slots:default={ slots.prepend }\n                />\n              )}\n            </div>\n          )}\n\n          <div class=\"v-card-item__content\">\n            { hasTitle && (\n              <VCardTitle key=\"title\">\n                { slots.title?.() ?? props.title }\n              </VCardTitle>\n            )}\n\n            { hasSubtitle && (\n              <VCardSubtitle key=\"subtitle\">\n                { slots.subtitle?.() ?? props.subtitle }\n              </VCardSubtitle>\n            )}\n\n            { slots.default?.() }\n          </div>\n\n          { hasAppend && (\n            <div key=\"append\" class=\"v-card-item__append\">\n              { !slots.append ? (\n                hasAppendMedia && (\n                  <VAvatar\n                    key=\"append-avatar\"\n                    density={ props.density }\n                    icon={ props.appendIcon }\n                    image={ props.appendAvatar }\n                  />\n                )\n              ) : (\n                <VDefaultsProvider\n                  key=\"append-defaults\"\n                  disabled={ !hasAppendMedia }\n                  defaults={{\n                    VAvatar: {\n                      density: props.density,\n                      icon: props.appendIcon,\n                      image: props.appendAvatar,\n                    },\n                  }}\n                  v-slots:default={ slots.append }\n                />\n              )}\n           </div>\n          )}\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCardItem = InstanceType<typeof VCardItem>\n", "import { createSimpleFunctional } from '@/util'\n\nexport const VCardText = createSimpleFunctional('v-card-text')\n\nexport type VCardText = InstanceType<typeof VCardText>\n"],
  "mappings": "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",
  "names": ["VCardActions", "defineComponent", "name", "setup", "_", "_ref", "slots", "provideDefaults", "VBtn", "variant", "useRender", "_createVNode", "default", "VCardSubtitle", "createSimpleFunctional", "VCardTitle", "createSimpleFunctional", "VCardItem", "genericComponent", "name", "props", "appendAvatar", "String", "appendIcon", "IconValue", "prependAvatar", "prependIcon", "subtitle", "title", "makeDensityProps", "setup", "_ref", "slots", "useRender", "hasPrependMedia", "hasPrepend", "prepend", "hasAppendMedia", "hasAppend", "append", "hasTitle", "hasSubtitle", "_createVNode", "VAvatar", "density", "VDefaultsProvider", "icon", "image", "VCardTitle", "default", "VCardSubtitle", "VCardText", "createSimpleFunctional", "VCard", "genericComponent", "name", "directives", "Ripple", "props", "appendAvatar", "String", "appendIcon", "IconValue", "disabled", "Boolean", "flat", "hover", "image", "link", "type", "default", "undefined", "prependAvatar", "prependIcon", "ripple", "subtitle", "text", "title", "makeThemeProps", "makeBorderProps", "makeDensityProps", "makeDimensionProps", "makeElevationProps", "makeLoaderProps", "makeLocationProps", "makePositionProps", "makeRoundedProps", "makeRouterProps", "makeTagProps", "makeVariantProps", "variant", "setup", "_ref", "attrs", "slots", "themeClasses", "provideTheme", "borderClasses", "useBorder", "colorClasses", "colorStyles", "variantClasses", "useVariant", "densityClasses", "useDensity", "dimensionStyles", "useDimension", "elevationClasses", "useElevation", "loaderClasses", "useLoader", "locationStyles", "useLocation", "positionClasses", "usePosition", "roundedClasses", "useRounded", "useLink", "isLink", "computed", "value", "isClickable", "useRender", "Tag", "tag", "hasTitle", "hasSubtitle", "hasHeader", "hasAppend", "append", "hasPrepend", "prepend", "hasImage", "hasCardItem", "hasText", "_withDirectives", "_createVNode", "href", "navigate", "VImg", "VDefaultsProvider", "cover", "src", "LoaderSlot", "loading", "loader", "VCardItem", "item", "VCardText", "actions", "VCardActions", "genOverlays", "_resolveDirective"]
}
