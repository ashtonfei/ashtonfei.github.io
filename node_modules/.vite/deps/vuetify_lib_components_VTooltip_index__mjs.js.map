{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTooltip/VTooltip.tsx"],
  "sourcesContent": ["// Styles\nimport './VTooltip.sass'\n\n// Components\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { computed, mergeProps, ref } from 'vue'\nimport { genericComponent, getUid, omit, useRender } from '@/util'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Types\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\nimport type { StrategyProps } from '@/components/VOverlay/locationStrategies'\n\nexport const VTooltip = genericComponent<OverlaySlots>()({\n  name: 'VTooltip',\n\n  props: {\n    id: String,\n    text: String,\n\n    ...omit(makeVOverlayProps({\n      closeOnBack: false,\n      location: 'end' as const,\n      locationStrategy: 'connected' as const,\n      minWidth: 0,\n      offset: 10,\n      openOnClick: false,\n      openOnHover: true,\n      origin: 'auto' as const,\n      scrim: false,\n      scrollStrategy: 'reposition' as const,\n      transition: false,\n    }), [\n      'absolute',\n      'persistent',\n      'eager',\n    ]),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const uid = getUid()\n    const id = computed(() => props.id || `v-tooltip-${uid}`)\n\n    const overlay = ref<VOverlay>()\n\n    const location = computed(() => {\n      return props.location.split(' ').length > 1\n        ? props.location\n        : props.location + ' center' as StrategyProps['location']\n    })\n\n    const origin = computed(() => {\n      return (\n        props.origin === 'auto' ||\n        props.origin === 'overlap' ||\n        props.origin.split(' ').length > 1 ||\n        props.location.split(' ').length > 1\n      ) ? props.origin\n        : props.origin + ' center' as StrategyProps['origin']\n    })\n\n    const transition = computed(() => {\n      if (props.transition) return props.transition\n      return isActive.value ? 'scale-transition' : 'fade-transition'\n    })\n\n    const activatorProps = computed(() =>\n      mergeProps({\n        'aria-describedby': id.value,\n      }, props.activatorProps)\n    )\n\n    useRender(() => {\n      const [overlayProps] = VOverlay.filterProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-tooltip',\n          ]}\n          id={ id.value }\n          { ...overlayProps }\n          v-model={ isActive.value }\n          transition={ transition.value }\n          absolute\n          location={ location.value }\n          origin={ origin.value }\n          persistent\n          role=\"tooltip\"\n          eager\n          activatorProps={ activatorProps.value }\n          _disableGlobalStack\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => slots.default?.(...args) ?? props.text,\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VTooltip = InstanceType<typeof VTooltip>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AAmBO,IAAMA,WAAWC,iBAAgB,EAAiB;EACvDC,MAAM;EAENC,OAAO;IACLC,IAAIC;IACJC,MAAMD;IAEN,GAAGE,KAAKC,kBAAkB;MACxBC,aAAa;MACbC,UAAU;MACVC,kBAAkB;MAClBC,UAAU;MACVC,QAAQ;MACRC,aAAa;MACbC,aAAa;MACbC,QAAQ;MACRC,OAAO;MACPC,gBAAgB;MAChBC,YAAY;IACd,CAAC,GAAG,CACF,YACA,cACA,OAAO,CACR;EACH;EAEAC,OAAO;IACL,qBAAsBC,WAAmB;EAC3C;EAEAC,MAAOnB,OAAKoB,MAAa;AAAA,QAAX;MAAEC;IAAM,IAACD;AACrB,UAAME,WAAWC,gBAAgBvB,OAAO,YAAY;AACpD,UAAM;MAAEwB;IAAQ,IAAIC,WAAU;AAE9B,UAAMC,MAAMC,OAAM;AAClB,UAAM1B,KAAK2B,SAAS,MAAM5B,MAAMC,MAAO,aAAYyB,KAAK;AAExD,UAAMG,UAAUC,IAAG;AAEnB,UAAMvB,WAAWqB,SAAS,MAAM;AAC9B,aAAO5B,MAAMO,SAASwB,MAAM,GAAG,EAAEC,SAAS,IACtChC,MAAMO,WACNP,MAAMO,WAAW;IACvB,CAAC;AAED,UAAMM,SAASe,SAAS,MAAM;AAC5B,aACE5B,MAAMa,WAAW,UACjBb,MAAMa,WAAW,aACjBb,MAAMa,OAAOkB,MAAM,GAAG,EAAEC,SAAS,KACjChC,MAAMO,SAASwB,MAAM,GAAG,EAAEC,SAAS,IACjChC,MAAMa,SACNb,MAAMa,SAAS;IACrB,CAAC;AAED,UAAMG,aAAaY,SAAS,MAAM;AAChC,UAAI5B,MAAMgB;AAAY,eAAOhB,MAAMgB;AACnC,aAAOM,SAASJ,QAAQ,qBAAqB;IAC/C,CAAC;AAED,UAAMe,iBAAiBL,SAAS,MAC9BM,WAAW;MACT,oBAAoBjC,GAAGiB;IACzB,GAAGlB,MAAMiC,cAAc,CAAC;AAG1BE,cAAU,MAAM;AACd,YAAM,CAACC,YAAY,IAAIC,SAASC,YAAYtC,KAAK;AAEjD,aAAAuC,YAAAF,UAAAG,WAAA;QAAA,OAEUX;QAAO,SACN,CACL,WAAW;QACZ,MACI5B,GAAGiB;MAAK,GACRkB,cAAY;QAAA,cACPd,SAASJ;QAAK,uBAAAuB,YAAdnB,SAASJ,QAAKuB;QAAA,cACXzB,WAAWE;QAAK,YAAA;QAAA,YAElBX,SAASW;QAAK,UAChBL,OAAOK;QAAK,cAAA;QAAA,QAEhB;QAAS,SAAA;QAAA,kBAEGe,eAAef;QAAK,uBAAA;MAAA,GAEhCM,OAAO,GAAA;QAGVkB,WAAWrB,MAAMqB;QACjBC,SAAS,WAAA;;AAAA,mBAAAC,OAAAC,UAAAb,QAAIc,OAAI,IAAAC,MAAAH,IAAA,GAAAI,OAAA,GAAAA,OAAAJ,MAAAI,QAAA;AAAJF,iBAAIE,QAAAH,UAAAG;UAAA;AAAA,kBAAK3B,iBAAMsB,YAANtB,+BAAgB,GAAGyB,UAAnBzB,YAA4BrB,MAAMG;QAAI;MAAA,CAAA;IAIpE,CAAC;AAED,WAAO8C,YAAY,CAAC,GAAGpB,OAAO;EAChC;AACF,CAAC;",
  "names": ["VTooltip", "genericComponent", "name", "props", "id", "String", "text", "omit", "makeVOverlayProps", "closeOnBack", "location", "locationStrategy", "minWidth", "offset", "openOnClick", "openOnHover", "origin", "scrim", "scrollStrategy", "transition", "emits", "value", "setup", "_ref", "slots", "isActive", "useProxiedModel", "scopeId", "useScopeId", "uid", "getUid", "computed", "overlay", "ref", "split", "length", "activatorProps", "mergeProps", "useRender", "overlayProps", "VOverlay", "filterProps", "_createVNode", "_mergeProps", "$event", "activator", "default", "_len", "arguments", "args", "Array", "_key", "forwardRefs"]
}
