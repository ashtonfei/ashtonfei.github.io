{
  "version": 3,
  "sources": ["../../vuetify/src/components/VAppBar/VAppBar.tsx", "../../vuetify/src/components/VToolbar/VToolbar.tsx", "../../vuetify/src/components/VToolbar/VToolbarTitle.tsx", "../../vuetify/src/components/VAppBar/VAppBarNavIcon.tsx", "../../vuetify/src/components/VToolbar/VToolbarItems.tsx", "../../vuetify/src/components/VAppBar/VAppBarTitle.tsx"],
  "sourcesContent": ["// Styles\nimport './VAppBar.sass'\n\n// Components\nimport { makeVToolbarProps, VToolbar } from '@/components/VToolbar/VToolbar'\n\n// Composables\nimport { makeLayoutItemProps, useLayoutItem } from '@/composables/layout'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useSsrBoot } from '@/composables/ssrBoot'\n\n// Utilities\nimport { computed, ref, toRef } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VToolbarSlots } from '@/components/VToolbar/VToolbar'\n\nexport const VAppBar = genericComponent<VToolbarSlots>()({\n  name: 'VAppBar',\n\n  props: {\n    // TODO: Implement scrolling techniques\n    // hideOnScroll: Boolean\n    // invertedScroll: Boolean\n    // collapseOnScroll: Boolean\n    // elevateOnScroll: Boolean\n    // shrinkOnScroll: Boolean\n    // fadeImageOnScroll: Boolean\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n    location: {\n      type: String as PropType<'top' | 'bottom'>,\n      default: 'top',\n      validator: (value: any) => ['top', 'bottom'].includes(value),\n    },\n\n    ...makeVToolbarProps(),\n    ...makeLayoutItemProps(),\n\n    height: {\n      type: [Number, String],\n      default: 64,\n    },\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const vToolbarRef = ref()\n    const isActive = useProxiedModel(props, 'modelValue')\n    const height = computed(() => {\n      const height: number = vToolbarRef.value?.contentHeight ?? 0\n      const extensionHeight: number = vToolbarRef.value?.extensionHeight ?? 0\n\n      return (height + extensionHeight)\n    })\n    const { ssrBootStyles } = useSsrBoot()\n    const { layoutItemStyles } = useLayoutItem({\n      id: props.name,\n      order: computed(() => parseInt(props.order, 10)),\n      position: toRef(props, 'location'),\n      layoutSize: height,\n      elementSize: height,\n      active: isActive,\n      absolute: toRef(props, 'absolute'),\n    })\n\n    useRender(() => {\n      const [toolbarProps] = VToolbar.filterProps(props)\n\n      return (\n        <VToolbar\n          ref={ vToolbarRef }\n          class={[\n            'v-app-bar',\n            {\n              'v-app-bar--bottom': props.location === 'bottom',\n            },\n          ]}\n          style={{\n            ...layoutItemStyles.value,\n            height: undefined,\n            ...ssrBootStyles.value,\n          }}\n          { ...toolbarProps }\n          v-slots={ slots }\n        />\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VAppBar = InstanceType<typeof VAppBar>\n", "// Styles\nimport './VToolbar.sass'\n\n// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VExpandTransition } from '@/components/transitions'\nimport { VImg } from '@/components/VImg'\nimport { VToolbarTitle } from './VToolbarTitle'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, ref, toRef } from 'vue'\nimport { convertToUnit, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MakeSlots } from '@/util'\n\nconst allowedDensities = [null, 'prominent', 'default', 'comfortable', 'compact'] as const\n\nexport type Density = null | 'prominent' | 'default' | 'comfortable' | 'compact'\n\nexport const makeVToolbarProps = propsFactory({\n  absolute: Boolean,\n  collapse: Boolean,\n  color: String,\n  density: {\n    type: String as PropType<Density>,\n    default: 'default',\n    validator: (v: any) => allowedDensities.includes(v),\n  },\n  extended: Boolean,\n  extensionHeight: {\n    type: [Number, String],\n    default: 48,\n  },\n  flat: Boolean,\n  floating: Boolean,\n  height: {\n    type: [Number, String],\n    default: 64,\n  },\n  image: String,\n  title: String,\n\n  ...makeBorderProps(),\n  ...makeElevationProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps({ tag: 'header' }),\n  ...makeThemeProps(),\n}, 'v-toolbar')\n\nexport type VToolbarSlots = MakeSlots<{\n  default: []\n  image: []\n  prepend: []\n  append: []\n  title: []\n  extension: []\n}>\n\nexport const VToolbar = genericComponent<VToolbarSlots>()({\n  name: 'VToolbar',\n\n  props: makeVToolbarProps(),\n\n  setup (props, { slots }) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const { borderClasses } = useBorder(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { themeClasses } = provideTheme(props)\n\n    const isExtended = ref(!!(props.extended || slots.extension?.()))\n    const contentHeight = computed(() => parseInt((\n      Number(props.height) +\n      (props.density === 'prominent' ? Number(props.height) : 0) -\n      (props.density === 'comfortable' ? 8 : 0) -\n      (props.density === 'compact' ? 16 : 0)\n    ), 10))\n    const extensionHeight = computed(() => isExtended.value\n      ? parseInt((\n        Number(props.extensionHeight) +\n        (props.density === 'prominent' ? Number(props.extensionHeight) : 0) -\n        (props.density === 'comfortable' ? 4 : 0) -\n        (props.density === 'compact' ? 8 : 0)\n      ), 10)\n      : 0\n    )\n\n    provideDefaults({\n      VBtn: {\n        variant: 'text',\n      },\n    })\n\n    useRender(() => {\n      const hasTitle = !!(props.title || slots.title)\n      const hasImage = !!(slots.image || props.image)\n\n      const extension = slots.extension?.()\n      isExtended.value = !!(props.extended || extension)\n\n      return (\n        <props.tag\n          class={[\n            'v-toolbar',\n            {\n              'v-toolbar--absolute': props.absolute,\n              'v-toolbar--collapse': props.collapse,\n              'v-toolbar--flat': props.flat,\n              'v-toolbar--floating': props.floating,\n              [`v-toolbar--density-${props.density}`]: true,\n            },\n            backgroundColorClasses.value,\n            borderClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n            themeClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n          ]}\n        >\n          { hasImage && (\n            <div key=\"image\" class=\"v-toolbar__image\">\n              { !slots.image ? (\n                <VImg\n                  key=\"image-img\"\n                  cover\n                  src={ props.image }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"image-defaults\"\n                  disabled={ !props.image }\n                  defaults={{\n                    VImg: {\n                      cover: true,\n                      src: props.image,\n                    },\n                  }}\n                  v-slots:default={ slots.image }\n                />\n              )}\n            </div>\n          )}\n\n          <VDefaultsProvider\n            defaults={{\n              VTabs: {\n                height: convertToUnit(contentHeight.value),\n              },\n            }}\n          >\n            <div\n              class=\"v-toolbar__content\"\n              style={{ height: convertToUnit(contentHeight.value) }}\n            >\n              { slots.prepend && (\n                <div class=\"v-toolbar__prepend\">\n                  { slots.prepend?.() }\n                </div>\n              )}\n\n              { hasTitle && (\n                <VToolbarTitle key=\"title\" text={ props.title }>\n                  {{ text: slots.title }}\n                </VToolbarTitle>\n              )}\n\n              { slots.default?.() }\n\n              { slots.append && (\n                <div class=\"v-toolbar__append\">\n                  { slots.append?.() }\n                </div>\n              )}\n            </div>\n          </VDefaultsProvider>\n\n          <VDefaultsProvider\n            defaults={{\n              VTabs: {\n                height: convertToUnit(extensionHeight.value),\n              },\n            }}\n          >\n            <VExpandTransition>\n              { isExtended.value && (\n                <div\n                  class=\"v-toolbar__extension\"\n                  style={{ height: convertToUnit(extensionHeight.value) }}\n                >\n                  { extension }\n                </div>\n              )}\n            </VExpandTransition>\n          </VDefaultsProvider>\n        </props.tag>\n      )\n    })\n\n    return {\n      contentHeight,\n      extensionHeight,\n    }\n  },\n})\n\nexport type VToolbar = InstanceType<typeof VToolbar>\n", "// Composables\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { MakeSlots } from '@/util'\n\nexport const makeVToolbarTitleProps = propsFactory({\n  text: String,\n\n  ...makeTagProps(),\n}, 'v-toolbar-title')\n\nexport type VToolbarTitleSlots = MakeSlots<{\n  default: []\n  text: []\n}>\n\nexport const VToolbarTitle = genericComponent<VToolbarTitleSlots>()({\n  name: 'VToolbarTitle',\n\n  props: makeVToolbarTitleProps(),\n\n  setup (props, { slots }) {\n    useRender(() => {\n      const hasText = !!(slots.default || slots.text || props.text)\n\n      return (\n        <props.tag class=\"v-toolbar-title\">\n          { hasText && (\n            <div class=\"v-toolbar-title__placeholder\">\n              { slots.text ? slots.text() : props.text }\n\n              { slots.default?.() }\n            </div>\n          )}\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VToolbarTitle = InstanceType<typeof VToolbarTitle>\n", "// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { VBtnSlots } from '@/components/VBtn/VBtn'\n\nexport const VAppBarNavIcon = genericComponent<VBtnSlots>()({\n  name: 'VAppBarNavIcon',\n\n  props: {\n    icon: {\n      type: IconValue,\n      default: '$menu',\n    },\n  },\n\n  setup (props, { slots }) {\n    useRender(() => (\n      <VBtn\n        class=\"v-app-bar-nav-icon\"\n        icon={ props.icon }\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VAppBarNavIcon = InstanceType<typeof VAppBarNavIcon>\n", "// Composables\nimport { makeVariantProps } from '@/composables/variant'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\nexport const VToolbarItems = genericComponent()({\n  name: 'VToolbarItems',\n\n  props: makeVariantProps({ variant: 'text' }),\n\n  setup (props, { slots }) {\n    provideDefaults({\n      VBtn: {\n        color: toRef(props, 'color'),\n        height: 'inherit',\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => (\n      <div class=\"v-toolbar-items\">\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VToolbarItems = InstanceType<typeof VToolbarItems>\n", "// Components\nimport { VToolbarTitle } from '@/components/VToolbar'\n\n// Utilities\nimport { makeVToolbarTitleProps } from '@/components/VToolbar/VToolbarTitle'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { VToolbarTitleSlots } from '@/components/VToolbar/VToolbarTitle'\n\nexport const VAppBarTitle = genericComponent<VToolbarTitleSlots>()({\n  name: 'VAppBarTitle',\n\n  props: makeVToolbarTitleProps(),\n\n  setup (props, { slots }) {\n    useRender(() => (\n      <VToolbarTitle\n        { ...props }\n        class=\"v-app-bar-title\"\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VAppBarTitle = InstanceType<typeof VAppBarTitle>\n"],
  "mappings": "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",
  "names": ["makeVToolbarTitleProps", "propsFactory", "text", "String", "makeTagProps", "VToolbarTitle", "genericComponent", "name", "props", "setup", "_ref", "slots", "useRender", "hasText", "default", "_createVNode", "tag", "allowedDensities", "makeVToolbarProps", "propsFactory", "absolute", "Boolean", "collapse", "color", "String", "density", "type", "default", "validator", "v", "includes", "extended", "extensionHeight", "Number", "flat", "floating", "height", "image", "title", "makeBorderProps", "makeElevationProps", "makeRoundedProps", "makeTagProps", "tag", "makeThemeProps", "VToolbar", "genericComponent", "name", "props", "setup", "_ref", "slots", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "toRef", "borderClasses", "useBorder", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "themeClasses", "provideTheme", "isExtended", "ref", "extension", "contentHeight", "computed", "parseInt", "value", "provideDefaults", "VBtn", "variant", "useRender", "hasTitle", "hasImage", "_createVNode", "VImg", "VDefaultsProvider", "cover", "src", "VTabs", "convertToUnit", "prepend", "VToolbarTitle", "text", "append", "VExpandTransition", "VAppBar", "genericComponent", "name", "props", "modelValue", "type", "Boolean", "default", "location", "String", "validator", "value", "includes", "makeVToolbarProps", "makeLayoutItemProps", "height", "Number", "emits", "setup", "_ref", "slots", "vToolbarRef", "ref", "isActive", "useProxiedModel", "computed", "contentHeight", "extensionHeight", "ssrBootStyles", "useSsrBoot", "layoutItemStyles", "useLayoutItem", "id", "order", "parseInt", "position", "toRef", "layoutSize", "elementSize", "active", "absolute", "useRender", "toolbarProps", "VToolbar", "filterProps", "_createVNode", "_mergeProps", "undefined", "VAppBarNavIcon", "genericComponent", "name", "props", "icon", "type", "IconValue", "default", "setup", "_ref", "slots", "useRender", "_createVNode", "VBtn", "VToolbarItems", "genericComponent", "name", "props", "makeVariantProps", "variant", "setup", "_ref", "slots", "provideDefaults", "VBtn", "color", "toRef", "height", "useRender", "_createVNode", "default", "VAppBarTitle", "genericComponent", "name", "props", "makeVToolbarTitleProps", "setup", "_ref", "slots", "useRender", "_createVNode", "VToolbarTitle", "_mergeProps"]
}
