{
  "version": 3,
  "sources": ["../../vuetify/src/components/VAlert/VAlert.tsx", "../../vuetify/src/components/VAlert/VAlertTitle.ts"],
  "sourcesContent": ["// Styles\nimport './VAlert.sass'\n\n// Components\nimport { VAlertTitle } from './VAlertTitle'\nimport { VBtn } from '@/components/VBtn'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useTextColor } from '@/composables/color'\nimport { IconValue } from '@/composables/icons'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MakeSlots } from '@/util'\n\nconst allowedTypes = ['success', 'info', 'warning', 'error'] as const\n\ntype ContextualType = typeof allowedTypes[number]\n\nexport type VAlertSlots = MakeSlots<{\n  default: []\n  prepend: []\n  title: []\n  text: []\n  append: []\n  close: []\n}>\n\nexport const VAlert = genericComponent<VAlertSlots>()({\n  name: 'VAlert',\n\n  props: {\n    border: {\n      type: [Boolean, String] as PropType<boolean | 'top' | 'end' | 'bottom' | 'start'>,\n      validator: (val: boolean | string) => {\n        return typeof val === 'boolean' || [\n          'top',\n          'end',\n          'bottom',\n          'start',\n        ].includes(val)\n      },\n    },\n    borderColor: String,\n    closable: Boolean,\n    closeIcon: {\n      type: IconValue,\n      default: '$close',\n    },\n    closeLabel: {\n      type: String,\n      default: '$vuetify.close',\n    },\n    icon: {\n      type: [Boolean, String, Function, Object] as PropType<false | IconValue>,\n      default: null,\n    },\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n    prominent: Boolean,\n    title: String,\n    text: String,\n    type: {\n      type: String as PropType<ContextualType>,\n      validator: (val: ContextualType) => allowedTypes.includes(val),\n    },\n\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeLocationProps(),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'flat' } as const),\n  },\n\n  emits: {\n    'click:close': (e: MouseEvent) => true,\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { emit, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const icon = computed(() => {\n      if (props.icon === false) return undefined\n      if (!props.type) return props.icon\n\n      return props.icon ?? `$${props.type}`\n    })\n    const variantProps = computed(() => ({\n      color: props.color ?? props.type,\n      variant: props.variant,\n    }))\n\n    const { themeClasses } = provideTheme(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(variantProps)\n    const { densityClasses } = useDensity(props)\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { roundedClasses } = useRounded(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'borderColor'))\n    const { t } = useLocale()\n\n    const closeProps = computed(() => ({\n      'aria-label': t(props.closeLabel),\n      onClick (e: MouseEvent) {\n        isActive.value = false\n\n        emit('click:close', e)\n      },\n    }))\n\n    return () => {\n      const hasPrepend = !!(slots.prepend || icon.value)\n      const hasTitle = !!(slots.title || props.title)\n      const hasText = !!(props.text || slots.text)\n      const hasClose = !!(slots.close || props.closable)\n\n      return isActive.value && (\n        <props.tag\n          class={[\n            'v-alert',\n            props.border && {\n              'v-alert--border': !!props.border,\n              [`v-alert--border-${props.border === true ? 'start' : props.border}`]: true,\n            },\n            {\n              'v-alert--prominent': props.prominent,\n            },\n            themeClasses.value,\n            colorClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            positionClasses.value,\n            roundedClasses.value,\n            variantClasses.value,\n          ]}\n          style={[\n            colorStyles.value,\n            dimensionStyles.value,\n            locationStyles.value,\n          ]}\n          role=\"alert\"\n        >\n          { genOverlays(false, 'v-alert') }\n\n          { props.border && (\n            <div\n              key=\"border\"\n              class={[\n                'v-alert__border',\n                textColorClasses.value,\n              ]}\n              style={ textColorStyles.value }\n            />\n          )}\n\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-alert__prepend\">\n              { !slots.prepend ? (\n                <VIcon\n                  key=\"prepend-icon\"\n                  density={ props.density }\n                  icon={ icon.value }\n                  size={ props.prominent ? 44 : 28 }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"prepend-defaults\"\n                  disabled={ !icon.value }\n                  defaults={{\n                    VIcon: {\n                      density: props.density,\n                      icon: icon.value,\n                      size: props.prominent ? 44 : 28,\n                    },\n                  }}\n                  v-slots:default={ slots.prepend }\n                />\n              )}\n            </div>\n          )}\n\n          <div class=\"v-alert__content\">\n            { hasTitle && (\n              <VAlertTitle key=\"title\">\n                { slots.title?.() ?? props.title }\n              </VAlertTitle>\n            )}\n\n            { hasText && (slots.text?.() ?? props.text) }\n\n            { slots.default?.() }\n          </div>\n\n          { slots.append && (\n            <div key=\"append\" class=\"v-alert__append\">\n              { slots.append() }\n            </div>\n          )}\n\n          { hasClose && (\n            <div key=\"close\" class=\"v-alert__close\">\n              { !slots.close ? (\n                <VBtn\n                  key=\"close-btn\"\n                  icon={ props.closeIcon }\n                  size=\"x-small\"\n                  variant=\"text\"\n                  { ...closeProps.value }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"close-defaults\"\n                  defaults={{\n                    VBtn: {\n                      icon: props.closeIcon,\n                      size: 'x-small',\n                      variant: 'text',\n                    },\n                  }}\n                >\n                  { slots.close?.({ props: closeProps.value }) }\n                </VDefaultsProvider>\n              )}\n            </div>\n          )}\n        </props.tag>\n      )\n    }\n  },\n})\n\nexport type VAlert = InstanceType<typeof VAlert>\n", "// Utilities\nimport { createSimpleFunctional } from '@/util'\n\nexport const VAlertTitle = createSimpleFunctional('v-alert-title')\n\nexport type VAlertTitle = InstanceType<typeof VAlertTitle>\n"],
  "mappings": "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",
  "names": ["VAlertTitle", "createSimpleFunctional", "allowedTypes", "VAlert", "genericComponent", "name", "props", "border", "type", "Boolean", "String", "validator", "val", "includes", "borderColor", "closable", "closeIcon", "IconValue", "default", "closeLabel", "icon", "Function", "Object", "modelValue", "prominent", "title", "text", "makeDensityProps", "makeDimensionProps", "makeElevationProps", "makeLocationProps", "makePositionProps", "makeRoundedProps", "makeTagProps", "makeThemeProps", "makeVariantProps", "variant", "emits", "e", "value", "setup", "_ref", "emit", "slots", "isActive", "useProxiedModel", "computed", "undefined", "variantProps", "color", "themeClasses", "provideTheme", "colorClasses", "colorStyles", "variantClasses", "useVariant", "densityClasses", "useDensity", "dimensionStyles", "useDimension", "elevationClasses", "useElevation", "locationStyles", "useLocation", "positionClasses", "usePosition", "roundedClasses", "useRounded", "textColorClasses", "textColorStyles", "useTextColor", "toRef", "t", "useLocale", "closeProps", "onClick", "hasPrepend", "prepend", "hasTitle", "hasText", "hasClose", "close", "_createVNode", "tag", "genOverlays", "VIcon", "density", "VDefaultsProvider", "size", "VAlertTitle", "append", "VBtn", "_mergeProps"]
}
